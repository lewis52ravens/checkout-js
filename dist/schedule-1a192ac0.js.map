{"version":3,"sources":["webpack://checkout/./src/app/schedule/Schedule.tsx"],"names":["props","state","isInitializing","componentDidMount","Promise","resolve","render","name","this","className","mapToScheduleProps","checkoutService","checkoutState","getCart","getCheckout","getConfig","getCustomer","getOrder","getShippingAddress","getSelectedShippingOption","isShippingStepPending","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isCreatingCustomerAddress","isUpdatingCheckout","checkout","config","customer","isComplete","cart","isLoading","undefined","shippingAddress","shippingOption","isGuest","initializeScheduling","address","shipOption","updateCheckout","Schedule"],"mappings":"0MA8BA,cACI,WAAYA,GAAZ,MACI,YAAMA,IAAM,K,OAEZ,EAAKC,MAAQ,CACTC,gBAAgB,G,EA4B5B,OAjCuB,yBASb,YAAAC,kBAAN,W,yGAEI,MAAO,CAAP,EAAOC,QAAQC,kBAGnB,YAAAC,OAAA,WACI,IAAIC,EAAO,qBASX,OALIC,KAAKP,MAAK,iBAEVM,EAAO,sBAIP,yBAAKE,UAAU,iBACX,2B,cAEMF,KAKtB,EAjCA,CAAuB,aAmChB,SAASG,EAAmB,G,IAC/BC,EAAe,kBACfC,EAAa,gBAGT,EAiBAA,EAAa,KAhBTC,EAAO,UACPC,EAAW,cACXC,EAAS,YACTC,EAAW,cACXC,EAAQ,WACRC,EAAkB,qBAClBC,EAAyB,4BAE7B,EAQAP,EAAa,SAPTQ,EAAqB,wBACrBC,EAAyB,4BACzBC,EAAqB,wBACrBC,EAAsB,yBACtBC,EAAyB,4BACzBC,EAAkB,qBAIpBC,EAAWZ,IACXa,EAASZ,IAETa,EAAWZ,IACT,GAAuBC,KAAc,IAAE,WAAvCY,OAAU,IAAG,GAAK,EACpBC,EAAOjB,IAEb,IAAKa,IAAaC,IAAWC,IAAaE,GAAQD,EAC9C,OAAO,KAcX,IAAME,EACFX,KACAC,KACAC,KACAC,KACAE,KACAD,UACyBQ,IAAzBd,UACgCc,IAAhCb,IASJ,MAAO,CACHW,KAAI,EACJG,gBARoBf,IASpBgB,eARmBf,IASnBY,UAAS,EACTI,QAASP,EAASO,QAClBjC,gBAAgB,EAChBkC,qBAXmB,SAACC,EAAkBC,GACtC,OAAOlC,QAAQC,QAAQ,CAACgC,QAAO,EAAEC,WAAU,KAW3CC,eAAgB5B,EAAgB4B,gBAIzB,sBAAa7B,EAAb,CAAiC8B","file":"schedule-1a192ac0.js","sourcesContent":["import { Address, Cart, CheckoutRequestBody, CheckoutSelectors, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\n// import { getShippableItemsCount } from '../shipping';\n// import getShippingMethodId from '../shipping/getShippingMethodId';\n\nexport interface ScheduleProps {\n    isReady: boolean;\n    hasCartChanged: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    navigateNextStep(): void;\n}\n\nexport interface WithCheckoutScheduleProps {\n    cart: Cart;\n    shippingAddress?: Address;\n    shippingOption?: ShippingOption;\n    isLoading: boolean;\n    isGuest: boolean;\n    isInitializing: boolean;\n    initializeScheduling(address: Address, shipOption: ShippingOption): Promise<any>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\ninterface ScheduleState {\n    isInitializing: boolean;\n}\n\nclass Schedule extends Component<ScheduleProps & WithCheckoutScheduleProps, ScheduleState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        // do stuff\n        return Promise.resolve();\n    }\n\n    render(): ReactNode {\n        let name = 'scheduling section';\n\n        const {\n            isInitializing,\n        } = this.state;\n        if (isInitializing) {\n            name = 'Scheduling section';\n        }\n\n        return (\n            <div className=\"checkout-form\">\n                <p>\n                    This is the\n                    { name }\n                </p>\n            </div>\n        );\n    }\n}\n\nexport function mapToScheduleProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutScheduleProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getOrder,\n            getShippingAddress,\n            getSelectedShippingOption,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    //const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const { isComplete = false } = getOrder() || {};\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart || isComplete) {\n        return null;\n    }\n\n    // Don't think we need anything from config\n    /*\n    const {\n        checkoutSettings: {\n            \n        },\n    } = config;\n    */\n\n    // const methodId = getShippingMethodId(checkout);\n    // const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isShippingStepPending() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress() ||\n        getShippingAddress() === undefined ||\n        getSelectedShippingOption() === undefined\n    );\n\n    const shippingAddress = getShippingAddress();\n    const shippingOption = getSelectedShippingOption();\n    const initScheduling = (address: Address, shipOption: ShippingOption) => {\n        return Promise.resolve({address, shipOption});\n    };\n\n    return {\n        cart,\n        shippingAddress,\n        shippingOption,\n        isLoading,\n        isGuest: customer.isGuest,\n        isInitializing: false,\n        initializeScheduling: initScheduling,\n        updateCheckout: checkoutService.updateCheckout,\n    };\n}\n\nexport default withCheckout(mapToScheduleProps)(Schedule);\n"],"sourceRoot":""}