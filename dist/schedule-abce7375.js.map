{"version":3,"sources":["webpack://checkout/./src/app/schedule/ScheduleFormFooter.tsx","webpack://checkout/./src/app/schedule/Schedule.tsx"],"names":["render","this","props","isDateSelected","isLoading","onSubmit","className","Button","disabled","id","onClick","type","variant","Primary","TranslatedString","handleDateChange","value","_event","setState","selectedDate","handleScheduleSubmit","navigateNextStep","state","getTime","componentDidMount","Promise","resolve","isInitializing","Form","autoComplete","Fieldset","calendarType","minDate","Date","minDetail","onChange","mapToScheduleProps","checkoutService","checkoutState","getCart","getCheckout","getConfig","getCustomer","getOrder","getShippingAddress","getSelectedShippingOption","isShippingStepPending","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isCreatingCustomerAddress","isUpdatingCheckout","checkout","config","customer","isComplete","cart","undefined","shippingAddress","shippingOption","isGuest","initializeScheduling","address","shipOption","updateCheckout","withCheckout"],"mappings":"oQAmCe,EAzBf,yB,+CAuBA,OAvBiC,yBAC7B,YAAAA,OAAA,WACU,MAIFC,KAAKC,MAHLC,EAAc,iBACdC,EAAS,YACTC,EAAQ,WAGZ,OAAO,oCACH,yBAAKC,UAAU,gBACX,kBAACC,EAAA,EAAM,CACHC,UAAYL,EACZM,GAAG,6BACHL,UAAYA,EACZM,QAAUL,EACVM,KAAK,SACLC,QAAUL,EAAA,EAAcM,SAExB,kBAACC,EAAA,EAAgB,CAACL,GAAG,+BAKzC,EAvBA,CAAiC,iBC0BjC,cACI,WAAYP,GAAZ,MACI,YAAMA,IAAM,K,OA0CR,EAAAa,iBAAyC,SAACC,EAAOC,GAErD,EAAKC,SAAS,CAACC,aAAcH,KAGzB,EAAAI,qBAA4C,kE,qDAahD,OAXIC,EACApB,KAAKC,MAAK,iBAGVD,KAAKqB,MAAK,aAEDC,UAGbF,IAEA,W,EAER,OAhEuB,yBAMb,YAAAG,kBAAN,W,yGAEI,MAAO,CAAP,EAAOC,QAAQC,kBAGnB,YAAA1B,OAAA,WAGQ,IAAA2B,EACA1B,KAAKqB,MAAK,eAEd,OACI,yBAAKhB,UAAU,iBAEP,kBAACsB,EAAA,EAAI,CACDC,aAAa,OAGb,kBAACC,EAAA,EAAQ,KACL,kBAAC,IAAQ,CACLC,aAAa,KACbC,QAAU,IAAIC,KACdC,UAAU,OACVC,SAAWlC,KAAKc,oBAIxB,kBAAC,EAAkB,CACfZ,gBAAiB,EACjBC,UAAYuB,EACZtB,SAAWJ,KAAKmB,0BA4B5C,EAhEA,CAAuB,aAkEhB,SAASgB,EAAmB,G,IAC/BC,EAAe,kBACfC,EAAa,gBAGT,EAiBAA,EAAa,KAhBTC,EAAO,UACPC,EAAW,cACXC,EAAS,YACTC,EAAW,cACXC,EAAQ,WACRC,EAAkB,qBAClBC,EAAyB,4BAE7B,EAQAP,EAAa,SAPTQ,EAAqB,wBACrBC,EAAyB,4BACzBC,EAAqB,wBACrBC,EAAsB,yBACtBC,EAAyB,4BACzBC,EAAkB,qBAIpBC,EAAWZ,IACXa,EAASZ,IAETa,EAAWZ,IACT,GAAuBC,KAAc,IAAE,WAAvCY,OAAU,IAAG,GAAK,EACpBC,EAAOjB,IAEb,IAAKa,IAAaC,IAAWC,IAAaE,GAAQD,EAC9C,OAAO,KAcX,IAAMnD,EACF0C,KACAC,KACAC,KACAC,KACAE,KACAD,UACyBO,IAAzBb,UACgCa,IAAhCZ,IASJ,MAAO,CACHW,KAAI,EACJE,gBARoBd,IASpBe,eARmBd,IASnBzC,UAAS,EACTwD,QAASN,EAASM,QAClBjC,gBAAgB,EAChBkC,qBAXmB,SAACC,EAAkBC,GACtC,OAAOtC,QAAQC,QAAQ,CAACoC,QAAO,EAAEC,WAAU,KAW3CC,eAAgB3B,EAAgB2B,gBAIzB,iBAAAC,EAAA,GAAa7B,EAAb,CAAiC","file":"schedule-abce7375.js","sourcesContent":["import React, { PureComponent, ReactNode } from \"react\";\nimport { TranslatedString } from \"../locale\";\nimport { Button, ButtonVariant } from \"../ui/button\";\n\nexport interface ScheduleFormFooterProps {\n    isDateSelected: boolean;\n    isLoading: boolean;\n    onSubmit(): Promise<void>;\n}\n\nclass ScheduleFormFooter extends PureComponent<ScheduleFormFooterProps> {\n    render(): ReactNode {\n        const {\n            isDateSelected,\n            isLoading,\n            onSubmit,\n        } = this.props;\n\n        return <>\n            <div className='form-actions'>\n                <Button\n                    disabled={ !isDateSelected }\n                    id=\"checkout-schedule-continue\"\n                    isLoading={ isLoading }\n                    onClick={ onSubmit }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>;\n    }\n}\n\nexport default ScheduleFormFooter;\n","import { Address, Cart, CheckoutRequestBody, CheckoutSelectors, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport Calendar, { OnChangeDateCallback } from 'react-calendar';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { Fieldset, Form } from '../ui/form';\n//import { LoadingOverlay } from '../ui/loading';\nimport ScheduleFormFooter from './ScheduleFormFooter';\n\n// import { getShippableItemsCount } from '../shipping';\n// import getShippingMethodId from '../shipping/getShippingMethodId';\n\nexport interface ScheduleProps {\n    isReady: boolean;\n    hasCartChanged: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    navigateNextStep(): void;\n}\n\nexport interface WithCheckoutScheduleProps {\n    cart: Cart;\n    shippingAddress?: Address;\n    shippingOption?: ShippingOption;\n    isLoading: boolean;\n    isGuest: boolean;\n    isInitializing: boolean;\n    initializeScheduling(address: Address, shipOption: ShippingOption): Promise<any>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\ninterface ScheduleState {\n    isInitializing: boolean;\n    selectedDate: Date;\n}\n\nclass Schedule extends Component<ScheduleProps & WithCheckoutScheduleProps, ScheduleState> {\n    constructor(props: any) {\n        super(props);\n\n    }\n\n    async componentDidMount(): Promise<void> {\n        // do stuff\n        return Promise.resolve();\n    }\n\n    render(): ReactNode {\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        return (\n            <div className=\"checkout-form\">\n                \n                    <Form\n                        autoComplete=\"off\"\n                        \n                    >\n                        <Fieldset>\n                            <Calendar\n                                calendarType=\"US\"\n                                minDate={ new Date() }\n                                minDetail=\"year\"\n                                onChange={ this.handleDateChange }\n                            />\n                        </Fieldset>\n\n                        <ScheduleFormFooter\n                            isDateSelected={ true }\n                            isLoading={ isInitializing }\n                            onSubmit={ this.handleScheduleSubmit }\n                        />\n                    </Form>\n                \n            </div>\n        );\n    }\n\n    private handleDateChange: OnChangeDateCallback = (value, _event) => {\n        //this.state.selectedDate = value;\n        this.setState({selectedDate: value});\n    };\n\n    private handleScheduleSubmit: () => Promise<void> = async () => {\n        const {\n            navigateNextStep,\n        } = this.props;\n        const {\n            selectedDate,\n        } = this.state;\n\n        selectedDate.getTime();\n\n        // Do some stuff...\n        navigateNextStep();\n\n        return;\n    };\n}\n\nexport function mapToScheduleProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutScheduleProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getOrder,\n            getShippingAddress,\n            getSelectedShippingOption,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    //const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const { isComplete = false } = getOrder() || {};\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart || isComplete) {\n        return null;\n    }\n\n    // Don't think we need anything from config\n    /*\n    const {\n        checkoutSettings: {\n            \n        },\n    } = config;\n    */\n\n    // const methodId = getShippingMethodId(checkout);\n    // const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isShippingStepPending() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress() ||\n        getShippingAddress() === undefined ||\n        getSelectedShippingOption() === undefined\n    );\n\n    const shippingAddress = getShippingAddress();\n    const shippingOption = getSelectedShippingOption();\n    const initScheduling = (address: Address, shipOption: ShippingOption) => {\n        return Promise.resolve({address, shipOption});\n    };\n\n    return {\n        cart,\n        shippingAddress,\n        shippingOption,\n        isLoading,\n        isGuest: customer.isGuest,\n        isInitializing: false,\n        initializeScheduling: initScheduling,\n        updateCheckout: checkoutService.updateCheckout,\n    };\n}\n\nexport default withCheckout(mapToScheduleProps)(Schedule);\n"],"sourceRoot":""}