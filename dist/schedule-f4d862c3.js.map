{"version":3,"sources":["webpack://checkout/./src/app/schedule/ScheduleFormFooter.tsx","webpack://checkout/./src/app/schedule/ScheduleInfo.ts","webpack://checkout/./src/app/schedule/TimeSlotSelector.tsx","webpack://checkout/./src/app/schedule/Schedule.tsx"],"names":["withLanguage","mapPropsToValues","selectedDateNum","selectedTime","displayString","handleSubmit","_values","props","onSubmitSchedule","validationSchema","dateNum","integer","time","max","isDateSelected","undefined","Form","className","id","testId","Fieldset","Input","type","name","value","Button","disabled","variant","Primary","TranslatedString","staleLimit","staleTimer","this","hasData","isStale","lastUpdate","updateCounter","setInterval","checkStaleness","currentMonth","Date","now","updateAllData","date","getMonth","getFullYear","year","Error","days","getDate","hasAvailableSlots","isEnabled","timeSlots","month","newMonth","prevMonth","nextMonth","fetchData","getPrevMonth","e","console","error","getNextMonth","centerMonth","promises","Promise","all","months","selectedMonth","m","testMonth","numDays","i","push","makeTestDay","makeTestMonth","resolve","day","dow","getDay","anyAvailable","ts","makeTestTimeSlot","isAvailable","startTime","available","Math","random","startDate","endDate","setHours","dtFormat","Intl","DateTimeFormat","hour12","timeStyle","sParts","formatToParts","eParts","sPeriod","find","val","sHour","ePeriod","eHour","endTime","super","selectedDate","shippingOption","onSelectTimeSlot","getTimeSlotsForDate","listItems","map","slot","active","isEqual","as","key","valueOf","action","onClick","handleTimeSlotClick","title","handler","getDateClass","isDataLoaded","view","schedule","getInfoForDate","isDateDisabled","handleViewChange","callbackProps","activeStartDate","newYear","changeMonth","handleDateClicked","_event","setState","handleScheduleSubmit","formValues","navigateNextStep","onUnhandledError","log","timeSlot","state","isInitializing","loadedData","onTimeSlotSelected","getTimeSlots","fluid","xs","calendarType","minDate","minDetail","showNeighboringMonth","onActiveStartDateChange","onClickDay","tileDisabled","tileClassName","bind","mapToScheduleProps","checkoutService","checkoutState","data","getCart","getCheckout","getConfig","getCustomer","getOrder","getShippingAddress","getSelectedShippingOption","statuses","isShippingStepPending","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isCreatingCustomerAddress","isUpdatingCheckout","checkout","config","customer","isComplete","cart","isLoading","shippingAddress","isGuest","initializeScheduling","address","shipOption","updateCheckout","withCheckout"],"mappings":"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","file":"schedule-f4d862c3.js","sourcesContent":["import { FunctionComponent } from \"enzyme\";\nimport { FormikProps, withFormik } from \"formik\";\nimport React, { memo } from \"react\";\nimport { number, object, string } from \"yup\";\nimport { TranslatedString, withLanguage, WithLanguageProps } from \"../locale\";\nimport { Button, ButtonVariant } from \"../ui/button\";\nimport { Fieldset, Form, Input } from \"../ui/form\";\nimport { TimeSlot } from \"./ScheduleInfo\";\n\nexport interface ScheduleFormFooterProps {\n    onSubmitSchedule(data: ScheduleFormValues): void;\n    selectedDateNum?: number;\n    selectedTime?: TimeSlot;\n}\n\nexport interface ScheduleFormValues {\n    selectedDateNum: number;\n    selectedTime: string;\n}\n\nconst ScheduleFormFooter: FunctionComponent<ScheduleFormFooterProps & WithLanguageProps & FormikProps<ScheduleFormValues>> = ({\n    selectedDateNum,\n    selectedTime,\n}) => {\n    const isDateSelected = selectedDateNum != undefined && selectedTime != undefined;\n\n    return (\n        <Form\n            className='checkout-form'\n            id='checkout-schedule'\n            testId='checkout-schedule'\n        >\n            <Fieldset>\n                <Input\n                    type='hidden'\n                    name=\"selectedDateNum\"\n                    value={ selectedDateNum }\n                />\n                <Input\n                    type='hidden'\n                    name=\"selectedTime\"\n                    value={ selectedTime?.displayString }\n                />\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={ !isDateSelected }\n                        id=\"checkout-schedule-continue\"\n                        variant={ ButtonVariant.Primary }\n                        type=\"submit\"\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </Fieldset>\n        </Form>\n    );\n}\n\nexport default withLanguage(withFormik<ScheduleFormFooterProps & WithLanguageProps, ScheduleFormValues>({\n    mapPropsToValues: ({\n        selectedDateNum,\n        selectedTime,\n    }) => ({\n        selectedDateNum: selectedDateNum ? selectedDateNum : -1,\n        selectedTime: selectedTime ? selectedTime.displayString : '',\n    }),\n    handleSubmit: (_values, { props: { onSubmitSchedule, selectedDateNum, selectedTime } }) => {\n        const vals: ScheduleFormValues = {\n            selectedDateNum: selectedDateNum ? selectedDateNum : -1,\n            selectedTime: selectedTime ? selectedTime.displayString : '',\n        };\n        onSubmitSchedule(vals);\n    },\n\n    validationSchema: () => {\n        const dateNum = number()\n            .integer();\n        const time = string()\n            .max(256);\n        const baseSchema = object({ dateNum, time });\n\n        return baseSchema;\n    },\n})(memo(ScheduleFormFooter)));","\nexport interface TimeSlot {\n    date: Date;\n    startTime: Date;\n    endTime: Date;\n    isAvailable: boolean;\n    displayString: string;\n}\n\nexport interface Day {\n    isEnabled: boolean;\n    timeSlots: TimeSlot[];\n    hasAvailableSlots: boolean;\n}\n\nexport interface Month {\n    year: number;\n    value: number;\n    days: Day[];\n}\n\ninterface MonthSymbol {\n    year: number;\n    value: number;\n}\n\nexport default class ScheduleInfo {\n    \n    staleLimit: 30000 = 30000;\n    staleTimer: 8000 = 8000;\n    hasData: boolean;\n    isStale: boolean;\n    currentMonth?: Month;\n    nextMonth?: Month;\n    prevMonth?: Month;\n    lastUpdate: number\n    updateCounter: number;\n    \n    constructor() {\n        this.hasData = false;\n        this.isStale = true;\n        this.lastUpdate = -1 * this.staleLimit;\n        this.updateCounter = 0;\n\n        setInterval(this.checkStaleness, this.staleTimer);\n    }\n\n\n    private checkStaleness() {\n        if (!this.isStale && this.currentMonth) {\n            const check = Date.now();\n            if (check - this.lastUpdate > this.staleLimit) {\n                this.isStale = true;\n                this.updateAllData(this.currentMonth);\n            }\n        }\n    }\n\n    public isUpdating(): boolean {\n        return this.updateCounter == 0;\n    }\n\n    public getInfoForDate(date: Date): Day {\n        if (this.hasData) {\n            if (date.getMonth() != this.currentMonth?.value || date.getFullYear() != this.currentMonth.year) {\n                throw new Error('Date is not in the month currently being viewed');\n            } else {\n                return this.currentMonth.days[date.getDate()-1];\n            }\n        } else {\n            return {\n                hasAvailableSlots: false,\n                isEnabled: false,\n                timeSlots: []\n            };\n        }\n    }\n\n    public getTimeSlotsForDate(date: Date): TimeSlot[] {\n        if (date.getMonth() != this.currentMonth?.value || date.getFullYear() != this.currentMonth?.year) {\n            throw new Error('Date is not in the month currently being viewed');\n        } else {\n            return this.currentMonth.days[date.getDate()-1].timeSlots;\n        }\n    }\n\n    public async changeMonth(month: number, year: number): Promise<boolean> {\n        this.hasData = false;\n        const newMonth: MonthSymbol = {\n            value: month,\n            year: year\n        };\n\n        if (this.isStale) {\n            return this.updateAllData(newMonth);\n        } else {\n            if (newMonth.value == this.prevMonth?.value && newMonth.year == this.prevMonth.year) {\n                this.nextMonth = this.currentMonth;\n                this.currentMonth = this.prevMonth;\n                try {\n                    this.prevMonth = await this.fetchData(getPrevMonth(newMonth));\n                    this.hasData = true;\n                    return true;\n                } catch (e) {\n                    console.error('Error retrieving schedule data from server for month: ' + getPrevMonth(newMonth).value);\n                    console.error(e);\n                    this.hasData = false;\n                    return false;\n                }\n            } else if (newMonth.value == this.nextMonth?.value && newMonth.year == this.nextMonth.year) {\n                this.prevMonth = this.currentMonth;\n                this.currentMonth = this.nextMonth;\n                try {\n                    this.nextMonth = await this.fetchData(getNextMonth(newMonth));\n                    this.hasData = true;\n                    return true;\n                } catch (e) {\n                    console.error('Error retrieving schedule data from server for month: ' + getNextMonth(newMonth).value);\n                    console.error(e);\n                    this.hasData = false;\n                    return false;\n                }\n            } else if (newMonth.value == this.currentMonth?.value && newMonth.year == this.currentMonth.year) {\n                return true;\n            } else {\n                return this.updateAllData(newMonth);\n            }\n        }\n\n    }\n\n    private async updateAllData(centerMonth: MonthSymbol): Promise<boolean> {\n        const promises = Promise.all([\n            this.fetchData(getPrevMonth(centerMonth)),\n            this.fetchData(centerMonth),\n            this.fetchData(getNextMonth(centerMonth))\n        ]);\n        let months: [Month, Month, Month];\n        try {\n            months = await promises;\n            this.prevMonth = months[0];\n            this.currentMonth = months[1];\n            this.nextMonth = months[2];\n            this.hasData = true;\n            this.isStale = false;\n            this.lastUpdate = Date.now();\n            return true;\n        } catch (e) {\n            console.error('Error retrieving schedule data from server for month: ' + centerMonth.value + ' (including surrounding months)');\n            console.error(e);\n            this.hasData = false;\n            return false;\n        }   \n    }\n\n    private fetchData(selectedMonth: MonthSymbol): Promise<Month> {\n        this.updateCounter++;\n        //TODO: Pull data from database and transform\n        const m = makeTestMonth(selectedMonth);\n        this.updateCounter--;\n        return Promise.resolve(m);\n    }\n}\n\nfunction getNextMonth(month: MonthSymbol): MonthSymbol {\n    if (month.value < 11) {\n        return {\n            value: month.value + 1,\n            year: month.year\n        };\n    } else {\n        return {\n            value: 0,\n            year: month.year + 1\n        };\n    }\n}\nfunction getPrevMonth(month: MonthSymbol): MonthSymbol {\n    if (month.value > 0) {\n        return {\n            value: month.value - 1,\n            year: month.year\n        };\n    } else {\n        return {\n            value: 11,\n            year: month.year - 1\n        };\n    }\n}\n\nfunction makeTestMonth(month: MonthSymbol): Month {\n    let testMonth: Month = {\n        year: month.year,\n        value: month.value,\n        days: []\n    };\n    const nextMonth = getNextMonth(month);\n    const numDays = new Date(nextMonth.year, nextMonth.value, 0).getDate();\n    for (let i = 1; i <= numDays; i++) {\n        testMonth.days.push( makeTestDay(month.year, month.value, i) );\n    }\n    return testMonth;\n}\n\nfunction makeTestDay(year: number, month: number, date: number): Day {\n    const day = new Date(year, month, date);\n    const dow = day.getDay();\n    if (dow == 6) {\n        let timeSlots: TimeSlot[] = [];\n        let anyAvailable = false;\n        for (let i = 0; i < 8; i++) {\n            const ts = makeTestTimeSlot(day, 9+i);\n            if (ts.isAvailable) {\n                anyAvailable = true;\n            }\n            timeSlots.push(ts);\n        }\n        return {\n            isEnabled: true,\n            timeSlots: timeSlots,\n            hasAvailableSlots: anyAvailable\n        }\n    } else if (dow == 0) {\n        let timeSlots: TimeSlot[] = [];\n        let anyAvailable = false;\n        for (let i = 0; i < 2; i++) {\n            const ts = makeTestTimeSlot(day, 8+i);\n            if (ts.isAvailable) {\n                anyAvailable = true;\n            }\n            timeSlots.push(ts);\n        }\n        return {\n            isEnabled: true,\n            timeSlots: timeSlots,\n            hasAvailableSlots: anyAvailable\n        };\n    } else {\n        return {\n            isEnabled: false,\n            timeSlots: [],\n            hasAvailableSlots: false\n        };\n    }\n}\n\nfunction makeTestTimeSlot(date: Date, startTime: number, isAvailable?: boolean): TimeSlot {\n    const available = isAvailable != undefined ? isAvailable : ( Math.random() < 0.8 );\n    let startDate = new Date(date);\n    let endDate = new Date(date);\n    startDate.setHours(startTime, 0, 0, 0);\n    endDate.setHours(startTime+1, 0, 0, 0);\n    const dtOptions: Intl.DateTimeFormatOptions = {\n        hour12: true,\n        timeStyle: 'short'\n    };\n    const dtFormat = new Intl.DateTimeFormat('en-US', dtOptions);\n    const sParts = dtFormat.formatToParts(startDate);\n    const eParts = dtFormat.formatToParts(endDate);\n    const sPeriod = sParts.find((val) => val.type == 'dayPeriod' );\n    const sHour = sParts.find((val) => val.type == 'hour');\n    const ePeriod = eParts.find((val) => val.type == 'dayPeriod');\n    const eHour = eParts.find((val) => val.type == 'hour');\n    //const sString = startDate.toLocaleTimeString([], dtFormat);\n    //const eString = endDate.toLocaleTimeString([], dtFormat);\n    \n    const displayString = `${sHour?.value} ${sPeriod?.value} - ${eHour?.value} ${ePeriod?.value}`;\n    return {\n        date: date,\n        startTime: startDate,\n        endTime: endDate,\n        isAvailable: available,\n        displayString: displayString\n    };\n}\n","import { ShippingOption } from \"@bigcommerce/checkout-sdk\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Component, ReactNode } from \"react\";\nimport { ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport { TimeSlot } from \"./ScheduleInfo\";\n\n\nexport interface TimeSlotProps {\n    selectedDate?: Date;\n    selectedTime?: TimeSlot;\n    shippingOption?: ShippingOption;\n    hasData: boolean;\n    onSelectTimeSlot(slot: TimeSlot): void;\n    getTimeSlotsForDate(date: Date): TimeSlot[];\n}\n\nclass TimeSlotSelector extends Component<TimeSlotProps> {\n\n    constructor(props: any) {\n        super(props);\n    }\n\n    async componentDidMount(): Promise<void> {\n        // do stuff\n        return Promise.resolve();\n    }\n\n    render(): ReactNode {\n        const {\n            selectedDate,\n            selectedTime,\n            shippingOption,\n            hasData,\n            onSelectTimeSlot,\n            getTimeSlotsForDate\n        } = this.props;\n        \n        shippingOption;\n\n        let listItems: JSX.Element[];\n        \n        if (!hasData) {\n            listItems = [(\n                <ListGroupItem key=\"loadingTimeSlot\" disabled>\n                    Loading...\n                </ListGroupItem>\n            )]\n        } else if (selectedDate) {\n            const slots = getTimeSlotsForDate(selectedDate);\n            listItems = slots.map((slot) => {\n                const active = _.isEqual(slot, selectedTime);\n                return (\n                    <ListGroupItem\n                        as='a'\n                        key={ slot.startTime.valueOf() }\n                        disabled={ !slot.isAvailable }\n                        action\n                        active={ active }\n                        onClick={ () => {this.handleTimeSlotClick(slot, onSelectTimeSlot)} }\n                        title={ slot.isAvailable ? \"\" : \"Unavailable\"}\n                    >\n                        {slot.displayString}\n                    </ListGroupItem>\n                );\n            });\n        } else {\n            listItems = [(\n                <ListGroupItem key=\"blankTimeSlot\" disabled>\n                    No date selected    \n                </ListGroupItem>\n            )]\n        }\n\n        return (\n            <div className=\"TimeSlots\">\n                <ListGroup>\n                    {listItems}\n                </ListGroup>\n            </div>\n        );\n    }\n\n    handleTimeSlotClick(slot: TimeSlot, handler: (s: TimeSlot) => void) {\n        if (slot.isAvailable) {\n            handler(slot);\n        }\n    }\n}\n\nexport default TimeSlotSelector;","import { Address, Cart, CheckoutRequestBody, CheckoutSelectors, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport Calendar, { CalendarTileProperties, DateCallback, ViewCallback } from 'react-calendar';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\n//import { LoadingOverlay } from '../ui/loading';\nimport ScheduleFormFooter, { ScheduleFormValues } from './ScheduleFormFooter';\nimport './Schedule.scss';\nimport ScheduleInfo, { TimeSlot } from './ScheduleInfo';\nimport TimeSlotSelector from './TimeSlotSelector';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { noop } from 'lodash';\n//import 'react-calendar/dist/Calendar.css';\n\n// import { getShippableItemsCount } from '../shipping';\n// import getShippingMethodId from '../shipping/getShippingMethodId';\n\nexport interface ScheduleProps {\n    isReady: boolean;\n    hasCartChanged: boolean;\n    timeSlot?: TimeSlot;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onTimeSlotSelected(timeSlot: TimeSlot): void;\n    navigateNextStep(isTimeSelected: boolean): void;\n}\n\nexport interface WithCheckoutScheduleProps {\n    cart: Cart;\n    shippingAddress?: Address;\n    shippingOption?: ShippingOption;\n    isLoading: boolean;\n    isGuest: boolean;\n    isInitializing: boolean;\n    initializeScheduling(address: Address, shipOption: ShippingOption): Promise<any>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\ninterface ScheduleState {\n    isInitializing: boolean;\n    selectedDate?: Date;\n    selectedDateNum?: number;\n    loadedData: boolean;\n}\n\nclass Schedule extends Component<ScheduleProps & WithCheckoutScheduleProps, ScheduleState> {\n\n    schedule: ScheduleInfo;\n\n    constructor(props: any) {\n        super(props);\n        this.schedule = new ScheduleInfo();\n        \n        if (this.props.timeSlot) {\n            this.state = {\n                isInitializing: true,\n                loadedData: false,\n                selectedDate: this.props.timeSlot.date,\n                selectedDateNum: this.props.timeSlot.date.valueOf(),\n            }\n        }\n    }\n\n    async componentDidMount(): Promise<void> {\n        const date: Date = this.state?.selectedDate ? this.state.selectedDate : new Date();\n        //const date = new Date();\n        const gotSchedule = await this.schedule.changeMonth(date.getMonth(), date.getFullYear());\n        if (gotSchedule) {\n            this.setState({isInitializing: false, loadedData: true});\n            return;\n        } else {\n            this.setState({isInitializing: false, loadedData: false});\n            return;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            shippingOption,\n            onTimeSlotSelected,\n            timeSlot,\n        } = this.props;\n\n        const {\n            selectedDate,\n            selectedDateNum,\n            loadedData,\n        } = this.state ?? {};\n        \n        const getTimeSlots = this.schedule.getTimeSlotsForDate;\n\n        return (\n            <div className=\"Calendar\">\n                \n                    <Container fluid='md'>\n                        <Row>\n                            <Col xs={7}>\n                                <div className='Calendar__container'>\n                                    <span className='Calendar__container__content'>\n                                        <Calendar\n                                            calendarType=\"US\"\n                                            minDate={ new Date() }\n                                            minDetail=\"month\"\n                                            showNeighboringMonth={ false }\n                                            onActiveStartDateChange={ this.handleViewChange }\n                                            onClickDay={ this.handleDateClicked }\n                                            tileDisabled={ this.isDateDisabled }\n                                            tileClassName={ (props) => { return this.getDateClass(loadedData, props) } }\n                                        />\n                                    </span>\n                                </div>\n                            </Col>\n                            <Col>\n                                <TimeSlotSelector\n                                    getTimeSlotsForDate={ getTimeSlots.bind(this.schedule) }\n                                    onSelectTimeSlot={ onTimeSlotSelected }\n                                    shippingOption={ shippingOption }\n                                    selectedDate={ selectedDate }\n                                    selectedTime={ timeSlot }\n                                    hasData={ loadedData }\n                                />\n                            </Col>\n                        </Row>\n                    </Container>\n\n                    <ScheduleFormFooter\n                        selectedDateNum={ selectedDateNum }\n                        selectedTime= { timeSlot }\n                        onSubmitSchedule={ this.handleScheduleSubmit }\n                    />\n                \n            </div>\n        );\n    }\n\n    private getDateClass = (isDataLoaded: boolean, props: CalendarTileProperties): string | string[] | null => {\n        if (props.view == 'month' && isDataLoaded) {\n            const day = this.schedule.getInfoForDate(props.date);\n            if (!day.isEnabled) {\n                return 'Day__Disabled'\n            } else if (!day.hasAvailableSlots) {\n                return 'Day__Unavailable';\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    private isDateDisabled = (props: CalendarTileProperties): boolean => {\n        const info = this.schedule.getInfoForDate(props.date);\n        const enabled = info.isEnabled;\n        return !enabled;\n        //return !this.schedule.getInfoForDate(props.date).isEnabled;\n    }\n\n    private handleViewChange: ViewCallback = async (callbackProps) => {\n        const newMonth = callbackProps.activeStartDate.getMonth();\n        const newYear = callbackProps.activeStartDate.getFullYear();\n        await this.schedule.changeMonth(newMonth, newYear);\n    };\n\n    private handleDateClicked: DateCallback = (value, _event) => {\n        this.setState({selectedDate: value, selectedDateNum: value.valueOf()});\n    }\n\n    private handleScheduleSubmit: (formValues: ScheduleFormValues) => Promise<void> = async (formValues) => {\n        const {\n            navigateNextStep = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        const selectedDate = formValues.selectedDateNum;\n        const selectedTime = formValues.selectedTime;\n        console.log('Selected Date: ' + selectedDate);\n        console.log('Selected Time: ' + selectedTime);\n        try {\n            if (selectedDate != -1 && selectedTime != '') {\n                console.log('selected date exists');\n                navigateNextStep(true);\n            } else {\n                console.log('No date selected');\n                navigateNextStep(false);\n            }\n        } catch (e: any) {\n            console.error(e);\n            onUnhandledError(e);\n        }\n    };\n}\n\nexport function mapToScheduleProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutScheduleProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getOrder,\n            getShippingAddress,\n            getSelectedShippingOption,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    //const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const { isComplete = false } = getOrder() || {};\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart || isComplete) {\n        return null;\n    }\n\n    // Don't think we need anything from config\n    /*\n    const {\n        checkoutSettings: {\n            \n        },\n    } = config;\n    */\n\n    // const methodId = getShippingMethodId(checkout);\n    // const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isShippingStepPending() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress() ||\n        getShippingAddress() === undefined ||\n        getSelectedShippingOption() === undefined\n    );\n\n    const shippingAddress = getShippingAddress();\n    const shippingOption = getSelectedShippingOption();\n    const initScheduling = (address: Address, shipOption: ShippingOption) => {\n        return Promise.resolve({address, shipOption});\n    };\n\n    return {\n        cart,\n        shippingAddress,\n        shippingOption,\n        isLoading,\n        isGuest: customer.isGuest,\n        isInitializing: false,\n        initializeScheduling: initScheduling,\n        updateCheckout: checkoutService.updateCheckout,\n    };\n}\n\nexport default withCheckout(mapToScheduleProps)(Schedule);\n"],"sourceRoot":""}